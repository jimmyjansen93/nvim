{
  "Function with Result": {
    "prefix": "fnr",
    "body": [
      "fn ${1:function_name}(${2:parameters}) -> Result<${3:T}, ${4:Error}> {",
      "\t$5",
      "\tOk(${6:value})",
      "}"
    ],
    "description": "Function returning Result"
  },
  "Match Expression": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "\t${2:pattern} => ${3:result},",
      "\t${4:pattern} => ${5:result},",
      "\t_ => ${6:default},",
      "}"
    ],
    "description": "Match expression"
  },
  "Error Handling with ?": {
    "prefix": "try",
    "body": ["let ${1:result} = ${2:fallible_operation}()?;", "$0"],
    "description": "Error handling with ? operator"
  },
  "Struct Definition": {
    "prefix": "struct",
    "body": [
      "#[derive(Debug, Clone)]",
      "pub struct ${1:StructName} {",
      "\tpub ${2:field}: ${3:Type},",
      "\t$0",
      "}"
    ],
    "description": "Struct with common derives"
  },
  "Enum Definition": {
    "prefix": "enum",
    "body": [
      "#[derive(Debug, Clone, PartialEq)]",
      "pub enum ${1:EnumName} {",
      "\t${2:Variant1},",
      "\t${3:Variant2}(${4:Type}),",
      "\t${5:Variant3} { ${6:field}: ${7:Type} },",
      "\t$0",
      "}"
    ],
    "description": "Enum with variants"
  },
  "Implementation Block": {
    "prefix": "impl",
    "body": [
      "impl ${1:StructName} {",
      "\tpub fn ${2:new}(${3:parameters}) -> Self {",
      "\t\tSelf {",
      "\t\t\t${4:field}: ${5:value},",
      "\t\t\t$0",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Implementation block with constructor"
  },
  "Trait Implementation": {
    "prefix": "implt",
    "body": [
      "impl ${1:Trait} for ${2:Type} {",
      "\t$3",
      "\t$0",
      "}"
    ],
    "description": "Trait implementation"
  },
  "Async Function": {
    "prefix": "async",
    "body": [
      "async fn ${1:function_name}(${2:parameters}) -> Result<${3:T}, ${4:Error}> {",
      "\t$5",
      "\tOk(${6:value})",
      "}"
    ],
    "description": "Async function"
  },
  "Test Function": {
    "prefix": "test",
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "\tuse super::*;",
      "",
      "\t#[test]",
      "\tfn ${1:test_name}() {",
      "\t\t$2",
      "\t\tassert_eq!(${3:actual}, ${4:expected});",
      "\t}",
      "",
      "\t#[test]",
      "\tfn ${5:test_error_case}() {",
      "\t\tlet result = ${6:function_call}();",
      "\t\tassert!(result.is_err());",
      "\t}",
      "}"
    ],
    "description": "Test module with test functions"
  },
  "Vector iteration": {
    "prefix": "iter",
    "body": [
      "${1:collection}",
      "\t.iter()",
      "\t.${2:filter}(|${3:item}| ${4:condition})",
      "\t.${5:map}(|${6:item}| ${7:transformation})",
      "\t.collect::<Vec<_>>()"
    ],
    "description": "Iterator chain with filter and map"
  },
  "Main function": {
    "prefix": "main",
    "body": [
      "fn main() -> Result<(), Box<dyn std::error::Error>> {",
      "\t$1",
      "\tOk(())",
      "}"
    ],
    "description": "Main function with error handling"
  },
  "Option handling": {
    "prefix": "iflet",
    "body": [
      "if let Some(${1:value}) = ${2:option} {",
      "\t$3",
      "} else {",
      "\t$4",
      "}"
    ],
    "description": "Option handling with if let"
  },
  "Lifetime annotation": {
    "prefix": "lifetime",
    "body": [
      "fn ${1:function_name}<'${2:a}>(${3:param}: &'${2:a} ${4:Type}) -> &'${2:a} ${5:Type} {",
      "\t$6",
      "}"
    ],
    "description": "Function with lifetime annotation"
  },
  "Error type definition": {
    "prefix": "error",
    "body": [
      "#[derive(Debug)]",
      "pub enum ${1:ErrorName} {",
      "\t${2:Variant1}(String),",
      "\t${3:Variant2} { message: String },",
      "\tIo(std::io::Error),",
      "}",
      "",
      "impl std::fmt::Display for ${1:ErrorName} {",
      "\tfn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
      "\t\tmatch self {",
      "\t\t\t${1:ErrorName}::${2:Variant1}(msg) => write!(f, \"${4:Error message}: {}\", msg),",
      "\t\t\t${1:ErrorName}::${3:Variant2} { message } => write!(f, \"${5:Error message}: {}\", message),",
      "\t\t\t${1:ErrorName}::Io(err) => write!(f, \"IO error: {}\", err),",
      "\t\t}",
      "\t}",
      "}",
      "",
      "impl std::error::Error for ${1:ErrorName} {}"
    ],
    "description": "Custom error type with Display and Error traits"
  },
  "Serde struct": {
    "prefix": "serde",
    "body": [
      "use serde::{Deserialize, Serialize};",
      "",
      "#[derive(Debug, Clone, Serialize, Deserialize)]",
      "pub struct ${1:StructName} {",
      "\t#[serde(rename = \"${2:json_field}\")]",
      "\tpub ${3:field}: ${4:Type},",
      "\t$0",
      "}"
    ],
    "description": "Struct with Serde derives"
  },
  "HTTP client": {
    "prefix": "reqwest",
    "body": [
      "use reqwest::Client;",
      "",
      "async fn ${1:fetch_data}() -> Result<${2:ResponseType}, reqwest::Error> {",
      "\tlet client = Client::new();",
      "\tlet response = client",
      "\t\t.get(\"${3:https://api.example.com/data}\")",
      "\t\t.header(\"User-Agent\", \"${4:MyApp/1.0}\")",
      "\t\t.send()",
      "\t\t.await?;",
      "",
      "\tlet data: ${2:ResponseType} = response.json().await?;",
      "\tOk(data)",
      "}"
    ],
    "description": "HTTP client with reqwest"
  },
  "Clap CLI": {
    "prefix": "clap",
    "body": [
      "use clap::{App, Arg};",
      "",
      "fn main() {",
      "\tlet matches = App::new(\"${1:app_name}\")",
      "\t\t.version(\"${2:1.0}\")",
      "\t\t.author(\"${3:Your Name}\")",
      "\t\t.about(\"${4:App description}\")",
      "\t\t.arg(",
      "\t\t\tArg::with_name(\"${5:input}\")",
      "\t\t\t\t.short(\"${6:i}\")",
      "\t\t\t\t.long(\"${5:input}\")",
      "\t\t\t\t.value_name(\"${7:FILE}\")",
      "\t\t\t\t.help(\"${8:Input file}\")",
      "\t\t\t\t.takes_value(true),",
      "\t\t)",
      "\t\t.get_matches();",
      "",
      "\tlet ${5:input} = matches.value_of(\"${5:input}\").unwrap_or(\"${9:default}\");",
      "\t$10",
      "}"
    ],
    "description": "Command line interface with clap"
  }
}

